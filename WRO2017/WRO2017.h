//This Header file is for WRO2017 Senior High Regular(made by team Double Storms,A.I.G)
#pragma config(Sensor, S1,     ,               sensorEV3_Color)
#pragma config(Sensor, S2,     ,               sensorEV3_Color)
#pragma config(Sensor, S4,     ,               sensorEV3_Color)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//line tracing
void line_tracing(float kp,float kd, float ki,int bp,unsigned int thr,int degree)
{
float old;
float err;
float integral;
float PID;
bool flag;
flag=true;
while(flag||getMotorEncoder(motorB)<=degree)
{
old=err;
integral=integral*0.1+err;
err=getColorReflected(S1)-getColorReflected(S2);
PID=(err*kp+(err-old)*kd+integral*ki);
setMotorSpeed(motorB, bp+PID);
setMotorSpeed(motorC, bp-PID);
if(flag&&getColorReflected(S1)+getColorReflected(S2)<=thr)
{
resetMotorEncoder(motorB);
flag=false;
}
}
}
//Turn_with color sensor(line)
void Turn_right(int power,int overR,unsigned int thr)
{
resetMotorEncoder(motorB);
while(getMotorEncoder(motorB)<=60)
{setMotorSpeed(motorB,power);
setMotorSpeed(motorC,-power);
}
while(getColorReflected(S2)>=thr)
{
setMotorSpeed(motorB,power);
setMotorSpeed(motorC,-power);
}
resetMotorEncoder(motorB);
while(getMotorEncoder(motorB)<=overR)
{
setMotorSpeed(motorB,power);
setMotorSpeed(motorC,-power);
}
setMotorSpeed(motorB,0);
setMotorSpeed(motorC,0);
delay(500);
}
void Turn_left(int power,int overR,unsigned int thr)
{resetMotorEncoder(motorB);
while(getMotorEncoder(motorC)<=60)
{setMotorSpeed(motorB,-power);
setMotorSpeed(motorC,power);
}
while(getColorReflected(S1)>=thr)
{
setMotorSpeed(motorB,-power);
setMotorSpeed(motorC,power);
}
resetMotorEncoder(motorB);
while(getMotorEncoder(motorC)<=overR)
{
setMotorSpeed(motorB,-power);
setMotorSpeed(motorC,power);
}
setMotorSpeed(motorB,0);
setMotorSpeed(motorC,0);
delay(500);
}
//color Checked
#include "hitechnic-colour-v2.h"
int Color_Convert(int inputcolor)
{
int result = 0;

switch(inputcolor)
		{
		case 0:
			result = 1;
			break;
		case 1:
			result = 5;
			break;
		case 2:
			result = 2;
			break;
		case 4:
			result = 3;
			break;
		case 5:
			result = 4;
			break;
		case 6:
			result = 4;
			break;
		case 9:
			result = 5;
			break;
		case 10:
			result = 5;
			break;
		default:
			result = 0;
		}
		return result;
}





//Clamp
void grap()
{
setMotorSpeed(motorA,10);
delay(2500);
setMotorSpeed(motorA,0);
}
void up()
{
setMotorSpeed(motorD,20);
delay(2500);
setMotorSpeed(motorD,0);
}
void put()
{
setMotorSpeed(motorA,-20);
delay(2500);
setMotorSpeed(motorA,0);
}
void down()
{
while(getMotorEncoder(motorD)>=0)
{setMotorSpeed(motorD,-10);
}
setMotorSpeed(motorD,0);
}
